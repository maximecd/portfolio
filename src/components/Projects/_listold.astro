---
import ButtonCircle from '../ButtonCircle.astro'
import Card from './Card.astro'
import MagaliCard from './Magali/MagaliCard.astro'
import WebracketsCard from './Webrackets/WebracketsCard.astro'
---

<div class="projects">
  <div class="scroll-container">
    <ul class="item-container">
      <Card href="/work/galerie-magali-martin">
        <MagaliCard />
      </Card>
      <Card href="/work/webrackets-agency">
        <WebracketsCard />
      </Card>
    </ul>
  </div>
  <nav class="wrapper">
    <div class="arrows">
      <ButtonCircle id="work-prev" label="Previous Project">
        <svg
          xmlns="http://www.w3.org/2000/svg"
          width="24"
          height="24"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          stroke-width="2"
          stroke-linecap="round"
          stroke-linejoin="round"
          class="lucide lucide-chevron-left"><path d="m15 18-6-6 6-6"></path></svg
        >
      </ButtonCircle>
      <ButtonCircle id="work-next" label="Next Project">
        <svg
          xmlns="http://www.w3.org/2000/svg"
          width="24"
          height="24"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          stroke-width="2"
          stroke-linecap="round"
          stroke-linejoin="round"
          class="lucide lucide-chevron-right"><path d="m9 18 6-6-6-6"></path></svg
        >
      </ButtonCircle>
    </div>
  </nav>
</div>

<script>
  document.addEventListener('astro:page-load', () => {
    console.log(`current page: ${window.location.pathname}`)
    const scrollContainer: HTMLDivElement = document.querySelector<HTMLDivElement>(
      '.scroll-container'
    ) as HTMLDivElement
    const prev: HTMLButtonElement = document.querySelector('#work-prev') as HTMLButtonElement
    const next: HTMLButtonElement = document.querySelector('#work-next') as HTMLButtonElement

    let firstItem: HTMLElement = scrollContainer.querySelector<HTMLElement>('.project') as HTMLElement

    const itemWidth = firstItem.offsetWidth

    const manageScroll = (direction: 'left' | 'right') => {
      const gap =
        parseInt(getComputedStyle(scrollContainer).getPropertyValue('--gap').slice(0, -3)) *
        parseFloat(getComputedStyle(document.documentElement).fontSize)

      if (direction === 'left') {
        scrollContainer.scrollTo({
          left: scrollContainer.scrollLeft - itemWidth - gap,
          behavior: 'smooth'
        })
      } else if (direction === 'right') {
        scrollContainer.scrollTo({
          left: scrollContainer.scrollLeft + itemWidth + gap,
          behavior: 'smooth'
        })
      }
    }

    prev.addEventListener('click', () => {
      manageScroll('left')
    })

    next.addEventListener('click', () => {
      manageScroll('right')
    })
  })
</script>

<style lang="scss">
  ul {
    list-style: none;
    padding: 0;
    margin: 0;
  }

  nav {
    margin-top: 1.6rem;
    display: flex;
    justify-content: flex-end;
  }

  .arrows {
    display: flex;
    gap: 1.6rem;
  }

  .scroll-container {
    overflow: scroll;
    scroll-snap-type: x mandatory;
    scroll-padding: 2.4rem;
    &::-webkit-scrollbar {
      display: none;
    }
    scrollbar-width: none;
    --gap: 1.6rem;

    @media (min-width: 768px) {
      // for the scroll padding
      // i want the item at the center of page (900px wrap)
      scroll-padding: calc((100vw - 900px) / 2);
      --gap: 7.2rem;
    }
  }

  .item-container {
    width: fit-content;
    display: grid;
    grid-auto-flow: column;
    padding-inline: 2.4rem;

    gap: var(--gap);

    @media (min-width: 768px) {
      padding-inline: calc((100vw - 900px) / 2);
    }
  }
</style>
