---
import Card from './Card.astro'
import MagaliCard from './Magali/MagaliCard.astro'
---

<div class="projects">
  <div class="scroll-container">
    <ul class="item-container">
      <Card href="/work/galerie-magali-martin">
        <MagaliCard />
      </Card>
      <Card href="/work/galerie-magali-martin">TEST</Card>
    </ul>
  </div>
  <nav class="wrapper">
    <div class="arrows">
      <button id="work-prev">
        <svg
          xmlns="http://www.w3.org/2000/svg"
          width="24"
          height="24"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          stroke-width="2"
          stroke-linecap="round"
          stroke-linejoin="round"
          class="lucide lucide-chevron-left"><path d="m15 18-6-6 6-6"></path></svg
        >
      </button>
      <button id="work-next">
        <svg
          xmlns="http://www.w3.org/2000/svg"
          width="24"
          height="24"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          stroke-width="2"
          stroke-linecap="round"
          stroke-linejoin="round"
          class="lucide lucide-chevron-right"><path d="m9 18 6-6-6-6"></path></svg
        >
      </button>
    </div>
  </nav>
</div>

<script>
  document.addEventListener('astro:page-load', () => {
    const scrollContainer: HTMLDivElement | null = document.querySelector('.scroll-container')
    const prev: HTMLButtonElement | null = document.querySelector('#work-prev')
    const next: HTMLButtonElement | null = document.querySelector('#work-next')

    if (!scrollContainer || !prev || !next) {
      throw new Error('Missing elements')
    }

    let firstItem: HTMLElement | null = scrollContainer.querySelector('.project')

    if (!firstItem) {
      throw new Error('Missing elements')
    }

    const itemWidth = firstItem.offsetWidth

    const manageScroll = (direction: 'left' | 'right') => {
      scrollContainer.style.scrollSnapType = 'none'
      scrollContainer.style.scrollBehavior = 'smooth'

      if (direction === 'left') {
        scrollContainer.scrollLeft -= itemWidth + 24
      } else if (direction === 'right') {
        scrollContainer.scrollLeft += itemWidth + 24
      }

      scrollContainer.addEventListener('scrollend', () => {
        scrollContainer.style.scrollSnapType = 'x mandatory'
        scrollContainer.style.scrollBehavior = 'auto'

        scrollContainer.removeEventListener('scrollend', () => {})
      })
    }

    prev.addEventListener('click', () => {
      manageScroll('left')
    })

    next.addEventListener('click', () => {
      manageScroll('right')
    })
  })
</script>

<style lang="scss">
  ul {
    list-style: none;
    padding: 0;
    margin: 0;
  }

  nav {
    margin-top: 1.6rem;
    display: flex;
    justify-content: flex-end;
  }

  .arrows {
    display: flex;
    gap: 1.6rem;
    button {
      display: grid;
      place-items: center;
      width: 4rem;
      height: 4rem;
      border: none;
      background-color: rgb(238, 238, 238);
      border-radius: 99px;
      color: var(--clr-text-light);
      cursor: pointer;
      &:hover {
        background-color: rgb(212, 212, 212);
        color: var(--clr-text);
      }
    }
  }

  .scroll-container {
    overflow: scroll;
    scroll-snap-type: x mandatory;
    scroll-padding: 2.4rem;
    &::-webkit-scrollbar {
      display: none;
    }
    scrollbar-width: none;

    @media (min-width: 768px) {
      scroll-padding: calc((100vw - 900px) / 2);
    }
  }

  .item-container {
    width: fit-content;
    display: grid;
    grid-auto-flow: column;
    gap: 1.6rem;
    padding-inline: 2.4rem;
    @media (min-width: 768px) {
      padding-inline: calc((100vw - 900px) / 2);
    }
  }
</style>
